This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
data/
  problems/
    problem-5-1750624520906.json
public/
  next.svg
  vercel.svg
src/
  app/
    admin/
      dashboard/
        page.tsx
      page.tsx
    api/
      auth/
        login/
          route.ts
      problems/
        [id]/
          page.tsx
        create/
          route.ts
        page.tsx
        route.ts
    components/
      CodeEditor.tsx
    globals.css
    layout.tsx
    page.tsx
.eslintrc.json
.gitignore
next.config.js
package.json
postcss.config.js
README.md
tailwind.config.ts
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="data/problems/problem-5-1750624520906.json">
{
  "leetcodeNumber": 5,
  "title": "wetwe",
  "difficulty": "Easy",
  "description": "5wt",
  "solution": "wgfweg",
  "timeComplexity": "gweg",
  "spaceComplexity": "gwegwe",
  "tags": [],
  "lldQuestion": "",
  "lldApproach": "",
  "lldTechStack": [],
  "lldCodeExample": "",
  "hldQuestion": "",
  "hldApproach": "",
  "hldTechStack": [],
  "hldArchitecture": "",
  "systemDesignQuestion": "",
  "systemDesignApproach": "",
  "systemDesignDiagram": "",
  "scalingConsiderations": "",
  "id": "problem-5-1750624520906",
  "createdAt": "2025-06-22T20:35:20.906Z",
  "updatedAt": "2025-06-22T20:35:20.906Z"
}
</file>

<file path="src/app/admin/dashboard/page.tsx">
"use client";
import { useState, useEffect } from "react";

interface ProblemData {
  // LeetCode Details
  leetcodeNumber: number;
  title: string;
  difficulty: "Easy" | "Medium" | "Hard";
  description: string;
  solution: string;
  timeComplexity: string;
  spaceComplexity: string;
  tags: string[];

  // LLD (Low Level Design)
  lldQuestion: string;
  lldApproach: string;
  lldTechStack: string[];
  lldCodeExample: string;

  // HLD (High Level Design)
  hldQuestion: string;
  hldApproach: string;
  hldTechStack: string[];
  hldArchitecture: string;

  // System Design
  systemDesignQuestion: string;
  systemDesignApproach: string;
  systemDesignDiagram: string;
  scalingConsiderations: string;
}

export default function AdminDashboard() {
  const [formData, setFormData] = useState<ProblemData>({
    leetcodeNumber: 0,
    title: "",
    difficulty: "Easy",
    description: "",
    solution: "",
    timeComplexity: "",
    spaceComplexity: "",
    tags: [],
    lldQuestion: "",
    lldApproach: "",
    lldTechStack: [],
    lldCodeExample: "",
    hldQuestion: "",
    hldApproach: "",
    hldTechStack: [],
    hldArchitecture: "",
    systemDesignQuestion: "",
    systemDesignApproach: "",
    systemDesignDiagram: "",
    scalingConsiderations: "",
  });

  const [isSubmitting, setIsSubmitting] = useState(false);
  const [currentTab, setCurrentTab] = useState("leetcode");

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);

    try {
      const response = await fetch("/api/problems/create", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(formData),
      });

      if (response.ok) {
        alert("Problem saved successfully!");
        // Reset form
        setFormData({
          leetcodeNumber: 0,
          title: "",
          difficulty: "Easy",
          description: "",
          solution: "",
          timeComplexity: "",
          spaceComplexity: "",
          tags: [],
          lldQuestion: "",
          lldApproach: "",
          lldTechStack: [],
          lldCodeExample: "",
          hldQuestion: "",
          hldApproach: "",
          hldTechStack: [],
          hldArchitecture: "",
          systemDesignQuestion: "",
          systemDesignApproach: "",
          systemDesignDiagram: "",
          scalingConsiderations: "",
        });
      } else {
        alert("Error saving problem");
      }
    } catch (error) {
      alert("Error saving problem");
    } finally {
      setIsSubmitting(false);
    }
  };

  const updateFormData = (field: keyof ProblemData, value: any) => {
    setFormData((prev) => ({ ...prev, [field]: value }));
  };

  const addTag = (
    tag: string,
    field: "tags" | "lldTechStack" | "hldTechStack"
  ) => {
    if (tag.trim()) {
      updateFormData(field, [...formData[field], tag.trim()]);
    }
  };

  const removeTag = (
    index: number,
    field: "tags" | "lldTechStack" | "hldTechStack"
  ) => {
    updateFormData(
      field,
      formData[field].filter((_, i) => i !== index)
    );
  };

  const tabs = [
    { id: "leetcode", label: "LeetCode Problem", icon: "üßÆ" },
    { id: "lld", label: "Low Level Design", icon: "üé®" },
    { id: "hld", label: "High Level Design", icon: "‚öôÔ∏è" },
    { id: "system", label: "System Design", icon: "üèóÔ∏è" },
  ];

  return (
    <div className="min-h-screen bg-black text-white">
      {/* Header */}
      <div className="bg-white/5 backdrop-blur-xl border-b border-white/10">
        <div className="max-w-7xl mx-auto px-4 py-6">
          <h1 className="text-3xl font-bold bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent">
            Admin Dashboard
          </h1>
          <p className="text-gray-400 mt-2">
            Create new LeetCode ‚Üí Engineering post
          </p>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 py-8">
        <form onSubmit={handleSubmit} className="space-y-8">
          {/* Tab Navigation */}
          <div className="flex flex-wrap gap-2 mb-8">
            {tabs.map((tab) => (
              <button
                key={tab.id}
                type="button"
                onClick={() => setCurrentTab(tab.id)}
                className={`flex items-center space-x-2 px-4 py-2 rounded-xl transition-all duration-300 ${
                  currentTab === tab.id
                    ? "bg-gradient-to-r from-purple-600 to-blue-600 text-white"
                    : "bg-white/5 text-gray-400 hover:text-white hover:bg-white/10"
                }`}
              >
                <span>{tab.icon}</span>
                <span className="hidden sm:block">{tab.label}</span>
              </button>
            ))}
          </div>

          {/* LeetCode Tab */}
          {currentTab === "leetcode" && (
            <div className="bg-white/5 backdrop-blur-xl rounded-3xl p-8 space-y-6">
              <h2 className="text-2xl font-bold text-purple-400 mb-6">
                üßÆ LeetCode Problem
              </h2>

              <div className="grid md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-gray-300 mb-2">
                    Problem Number
                  </label>
                  <input
                    type="number"
                    value={formData.leetcodeNumber || ""}
                    onChange={(e) =>
                      updateFormData("leetcodeNumber", parseInt(e.target.value))
                    }
                    className="w-full bg-white/5 border border-white/20 rounded-xl px-4 py-3 text-white"
                    placeholder="1"
                    required
                  />
                </div>

                <div>
                  <label className="block text-gray-300 mb-2">Difficulty</label>
                  <select
                    value={formData.difficulty}
                    onChange={(e) =>
                      updateFormData("difficulty", e.target.value)
                    }
                    className="w-full bg-white/5 border border-white/20 rounded-xl px-4 py-3 text-white"
                  >
                    <option value="Easy">Easy</option>
                    <option value="Medium">Medium</option>
                    <option value="Hard">Hard</option>
                  </select>
                </div>
              </div>

              <div>
                <label className="block text-gray-300 mb-2">Title</label>
                <input
                  type="text"
                  value={formData.title}
                  onChange={(e) => updateFormData("title", e.target.value)}
                  className="w-full bg-white/5 border border-white/20 rounded-xl px-4 py-3 text-white"
                  placeholder="Two Sum"
                  required
                />
              </div>

              <div>
                <label className="block text-gray-300 mb-2">Description</label>
                <textarea
                  value={formData.description}
                  onChange={(e) =>
                    updateFormData("description", e.target.value)
                  }
                  className="w-full bg-white/5 border border-white/20 rounded-xl px-4 py-3 text-white h-32"
                  placeholder="Given an array of integers, return indices of two numbers such that they add up to a specific target..."
                  required
                />
              </div>

              <div>
                <label className="block text-gray-300 mb-2">
                  Solution (Code)
                </label>
                <textarea
                  value={formData.solution}
                  onChange={(e) => updateFormData("solution", e.target.value)}
                  className="w-full bg-white/5 border border-white/20 rounded-xl px-4 py-3 text-white h-40 font-mono text-sm"
                  placeholder="function twoSum(nums: number[], target: number): number[] {..."
                  required
                />
              </div>

              <div className="grid md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-gray-300 mb-2">
                    Time Complexity
                  </label>
                  <input
                    type="text"
                    value={formData.timeComplexity}
                    onChange={(e) =>
                      updateFormData("timeComplexity", e.target.value)
                    }
                    className="w-full bg-white/5 border border-white/20 rounded-xl px-4 py-3 text-white"
                    placeholder="O(n)"
                    required
                  />
                </div>

                <div>
                  <label className="block text-gray-300 mb-2">
                    Space Complexity
                  </label>
                  <input
                    type="text"
                    value={formData.spaceComplexity}
                    onChange={(e) =>
                      updateFormData("spaceComplexity", e.target.value)
                    }
                    className="w-full bg-white/5 border border-white/20 rounded-xl px-4 py-3 text-white"
                    placeholder="O(n)"
                    required
                  />
                </div>
              </div>

              {/* Tags */}
              <div>
                <label className="block text-gray-300 mb-2">Tags</label>
                <div className="flex flex-wrap gap-2 mb-2">
                  {formData.tags.map((tag, index) => (
                    <span
                      key={index}
                      className="bg-purple-500/20 text-purple-300 px-3 py-1 rounded-full text-sm flex items-center space-x-2"
                    >
                      <span>{tag}</span>
                      <button
                        type="button"
                        onClick={() => removeTag(index, "tags")}
                        className="text-purple-300 hover:text-white"
                      >
                        √ó
                      </button>
                    </span>
                  ))}
                </div>
                <input
                  type="text"
                  className="w-full bg-white/5 border border-white/20 rounded-xl px-4 py-3 text-white"
                  placeholder="Add tag and press Enter"
                  onKeyPress={(e) => {
                    if (e.key === "Enter") {
                      e.preventDefault();
                      addTag((e.target as HTMLInputElement).value, "tags");
                      (e.target as HTMLInputElement).value = "";
                    }
                  }}
                />
              </div>
            </div>
          )}

          {/* LLD Tab */}
          {currentTab === "lld" && (
            <div className="bg-white/5 backdrop-blur-xl rounded-3xl p-8 space-y-6">
              <h2 className="text-2xl font-bold text-purple-400 mb-6">
                üé® Low Level Design
              </h2>

              <div>
                <label className="block text-gray-300 mb-2">LLD Question</label>
                <textarea
                  value={formData.lldQuestion}
                  onChange={(e) =>
                    updateFormData("lldQuestion", e.target.value)
                  }
                  className="w-full bg-white/5 border border-white/20 rounded-xl px-4 py-3 text-white h-32"
                  placeholder="Design a shopping cart component that finds products matching user's budget constraints..."
                  required
                />
              </div>

              <div>
                <label className="block text-gray-300 mb-2">LLD Approach</label>
                <textarea
                  value={formData.lldApproach}
                  onChange={(e) =>
                    updateFormData("lldApproach", e.target.value)
                  }
                  className="w-full bg-white/5 border border-white/20 rounded-xl px-4 py-3 text-white h-40"
                  placeholder="We can use the Two Sum algorithm to efficiently find product combinations that fit within the user's budget..."
                  required
                />
              </div>

              <div>
                <label className="block text-gray-300 mb-2">
                  LLD Code Example
                </label>
                <textarea
                  value={formData.lldCodeExample}
                  onChange={(e) =>
                    updateFormData("lldCodeExample", e.target.value)
                  }
                  className="w-full bg-white/5 border border-white/20 rounded-xl px-4 py-3 text-white h-48 font-mono text-sm"
                  placeholder="interface Product { id: string; price: number; name: string; }..."
                  required
                />
              </div>

              {/* LLD Tech Stack */}
              <div>
                <label className="block text-gray-300 mb-2">Tech Stack</label>
                <div className="flex flex-wrap gap-2 mb-2">
                  {formData.lldTechStack.map((tech, index) => (
                    <span
                      key={index}
                      className="bg-blue-500/20 text-blue-300 px-3 py-1 rounded-full text-sm flex items-center space-x-2"
                    >
                      <span>{tech}</span>
                      <button
                        type="button"
                        onClick={() => removeTag(index, "lldTechStack")}
                        className="text-blue-300 hover:text-white"
                      >
                        √ó
                      </button>
                    </span>
                  ))}
                </div>
                <input
                  type="text"
                  className="w-full bg-white/5 border border-white/20 rounded-xl px-4 py-3 text-white"
                  placeholder="React, TypeScript, etc."
                  onKeyPress={(e) => {
                    if (e.key === "Enter") {
                      e.preventDefault();
                      addTag(
                        (e.target as HTMLInputElement).value,
                        "lldTechStack"
                      );
                      (e.target as HTMLInputElement).value = "";
                    }
                  }}
                />
              </div>
            </div>
          )}

          {/* HLD Tab */}
          {currentTab === "hld" && (
            <div className="bg-white/5 backdrop-blur-xl rounded-3xl p-8 space-y-6">
              <h2 className="text-2xl font-bold text-green-400 mb-6">
                ‚öôÔ∏è High Level Design
              </h2>

              <div>
                <label className="block text-gray-300 mb-2">HLD Question</label>
                <textarea
                  value={formData.hldQuestion}
                  onChange={(e) =>
                    updateFormData("hldQuestion", e.target.value)
                  }
                  className="w-full bg-white/5 border border-white/20 rounded-xl px-4 py-3 text-white h-32"
                  placeholder="Design a user matching API that pairs users with complementary skills..."
                  required
                />
              </div>

              <div>
                <label className="block text-gray-300 mb-2">HLD Approach</label>
                <textarea
                  value={formData.hldApproach}
                  onChange={(e) =>
                    updateFormData("hldApproach", e.target.value)
                  }
                  className="w-full bg-white/5 border border-white/20 rounded-xl px-4 py-3 text-white h-40"
                  placeholder="We can apply the Two Sum pattern to match users by storing required skills in a hash map..."
                  required
                />
              </div>

              <div>
                <label className="block text-gray-300 mb-2">Architecture</label>
                <input
                  type="text"
                  value={formData.hldArchitecture}
                  onChange={(e) =>
                    updateFormData("hldArchitecture", e.target.value)
                  }
                  className="w-full bg-white/5 border border-white/20 rounded-xl px-4 py-3 text-white"
                  placeholder="Microservices with Redis Cache"
                  required
                />
              </div>

              {/* HLD Tech Stack */}
              <div>
                <label className="block text-gray-300 mb-2">Tech Stack</label>
                <div className="flex flex-wrap gap-2 mb-2">
                  {formData.hldTechStack.map((tech, index) => (
                    <span
                      key={index}
                      className="bg-green-500/20 text-green-300 px-3 py-1 rounded-full text-sm flex items-center space-x-2"
                    >
                      <span>{tech}</span>
                      <button
                        type="button"
                        onClick={() => removeTag(index, "hldTechStack")}
                        className="text-green-300 hover:text-white"
                      >
                        √ó
                      </button>
                    </span>
                  ))}
                </div>
                <input
                  type="text"
                  className="w-full bg-white/5 border border-white/20 rounded-xl px-4 py-3 text-white"
                  placeholder="Node.js, Redis, PostgreSQL, etc."
                  onKeyPress={(e) => {
                    if (e.key === "Enter") {
                      e.preventDefault();
                      addTag(
                        (e.target as HTMLInputElement).value,
                        "hldTechStack"
                      );
                      (e.target as HTMLInputElement).value = "";
                    }
                  }}
                />
              </div>
            </div>
          )}

          {/* System Design Tab */}
          {currentTab === "system" && (
            <div className="bg-white/5 backdrop-blur-xl rounded-3xl p-8 space-y-6">
              <h2 className="text-2xl font-bold text-orange-400 mb-6">
                üèóÔ∏è System Design
              </h2>

              <div>
                <label className="block text-gray-300 mb-2">
                  System Design Question
                </label>
                <textarea
                  value={formData.systemDesignQuestion}
                  onChange={(e) =>
                    updateFormData("systemDesignQuestion", e.target.value)
                  }
                  className="w-full bg-white/5 border border-white/20 rounded-xl px-4 py-3 text-white h-32"
                  placeholder="Design a load balancer that distributes requests across server pairs efficiently..."
                  required
                />
              </div>

              <div>
                <label className="block text-gray-300 mb-2">
                  System Design Approach
                </label>
                <textarea
                  value={formData.systemDesignApproach}
                  onChange={(e) =>
                    updateFormData("systemDesignApproach", e.target.value)
                  }
                  className="w-full bg-white/5 border border-white/20 rounded-xl px-4 py-3 text-white h-40"
                  placeholder="Using the Two Sum concept, we can implement consistent hashing to pair requests with optimal server combinations..."
                  required
                />
              </div>

              <div>
                <label className="block text-gray-300 mb-2">
                  System Diagram (URL or Description)
                </label>
                <input
                  type="text"
                  value={formData.systemDesignDiagram}
                  onChange={(e) =>
                    updateFormData("systemDesignDiagram", e.target.value)
                  }
                  className="w-full bg-white/5 border border-white/20 rounded-xl px-4 py-3 text-white"
                  placeholder="https://example.com/diagram.png or describe the architecture"
                />
              </div>

              <div>
                <label className="block text-gray-300 mb-2">
                  Scaling Considerations
                </label>
                <textarea
                  value={formData.scalingConsiderations}
                  onChange={(e) =>
                    updateFormData("scalingConsiderations", e.target.value)
                  }
                  className="w-full bg-white/5 border border-white/20 rounded-xl px-4 py-3 text-white h-32"
                  placeholder="How this system scales to millions of users, potential bottlenecks, and optimization strategies..."
                  required
                />
              </div>
            </div>
          )}

          {/* Submit Button */}
          <div className="text-center">
            <button
              type="submit"
              disabled={isSubmitting}
              className="bg-gradient-to-r from-purple-600 to-blue-600 text-white px-12 py-4 rounded-2xl font-semibold text-lg transition-all duration-300 hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isSubmitting ? "Saving..." : "Save Problem"}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}
</file>

<file path="src/app/admin/page.tsx">
"use client";
import { useState } from "react";
import { useRouter } from "next/navigation";

export default function AdminLogin() {
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const router = useRouter();

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();

    const response = await fetch("/api/auth/login", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ password }),
    });

    if (response.ok) {
      router.push("/admin/dashboard");
    } else {
      setError("Invalid password");
    }
  };

  return (
    <div className="min-h-screen bg-black flex items-center justify-center">
      <div className="bg-white/10 backdrop-blur-xl border border-white/20 rounded-3xl p-8 w-full max-w-md">
        <h1 className="text-3xl font-bold text-white mb-8 text-center">
          Admin Access
        </h1>

        <form onSubmit={handleLogin} className="space-y-6">
          <div>
            <label className="block text-gray-300 mb-2">Password</label>
            <input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="w-full bg-white/5 border border-white/20 rounded-xl px-4 py-3 text-white placeholder-gray-400 focus:outline-none focus:border-purple-500"
              placeholder="Enter admin password"
              required
            />
          </div>

          {error && <div className="text-red-400 text-sm">{error}</div>}

          <button
            type="submit"
            className="w-full bg-gradient-to-r from-purple-600 to-blue-600 text-white py-3 rounded-xl font-semibold hover:scale-105 transition-all duration-300"
          >
            Access Dashboard
          </button>
        </form>
      </div>
    </div>
  );
}
</file>

<file path="src/app/api/auth/login/route.ts">
import { NextResponse } from 'next/server';
import { cookies } from 'next/headers';

const ADMIN_PASSWORD = 'your-super-secret-password-123'; // Change this!

export async function POST(request: Request) {
  const { password } = await request.json();

  if (password === ADMIN_PASSWORD) {
    const cookieStore = cookies();
    cookieStore.set('admin-auth', 'authenticated', {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      maxAge: 60 * 60 * 24 * 7, // 7 days
    });

    return NextResponse.json({ success: true });
  }

  return NextResponse.json({ error: 'Invalid password' }, { status: 401 });
}
</file>

<file path="src/app/api/problems/[id]/page.tsx">
"use client";
import { useState, useEffect } from "react";
import Link from "next/link";
import { useParams } from "next/navigation";

interface Problem {
  id: string;
  leetcodeNumber: number;
  title: string;
  difficulty: "Easy" | "Medium" | "Hard";
  description: string;
  solution: string;
  timeComplexity: string;
  spaceComplexity: string;
  tags: string[];
  lldQuestion: string;
  lldApproach: string;
  lldTechStack: string[];
  lldCodeExample: string;
  hldQuestion: string;
  hldApproach: string;
  hldTechStack: string[];
  hldArchitecture: string;
  systemDesignQuestion: string;
  systemDesignApproach: string;
  systemDesignDiagram: string;
  scalingConsiderations: string;
  createdAt: string;
}

export default function ProblemDetailPage() {
  const params = useParams();
  const [problem, setProblem] = useState<Problem | null>(null);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState("leetcode");

  useEffect(() => {
    fetchProblem();
  }, [params.id]);

  const fetchProblem = async () => {
    try {
      const response = await fetch("/api/problems");
      const data = await response.json();
      const foundProblem = data.problems?.find(
        (p: Problem) => p.id === params.id
      );
      setProblem(foundProblem || null);
    } catch (error) {
      console.error("Failed to fetch problem:", error);
    } finally {
      setLoading(false);
    }
  };

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case "Easy":
        return "from-green-400 to-emerald-400";
      case "Medium":
        return "from-yellow-400 to-orange-400";
      case "Hard":
        return "from-red-400 to-pink-400";
      default:
        return "from-gray-400 to-gray-500";
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-black flex items-center justify-center">
        <div className="text-white text-xl">Loading problem...</div>
      </div>
    );
  }

  if (!problem) {
    return (
      <div className="min-h-screen bg-black flex items-center justify-center">
        <div className="text-center">
          <div className="text-6xl mb-4">üòµ</div>
          <h1 className="text-2xl font-bold text-white mb-4">
            Problem Not Found
          </h1>
          <Link
            href="/problems"
            className="bg-gradient-to-r from-purple-600 to-blue-600 text-white px-6 py-3 rounded-xl font-semibold hover:scale-105 transition-all duration-300"
          >
            ‚Üê Back to Problems
          </Link>
        </div>
      </div>
    );
  }

  const tabs = [
    { id: "leetcode", label: "Algorithm", icon: "üßÆ" },
    { id: "lld", label: "Frontend Design", icon: "üé®" },
    { id: "hld", label: "Backend Design", icon: "‚öôÔ∏è" },
    { id: "system", label: "System Design", icon: "üèóÔ∏è" },
  ];

  return (
    <div className="min-h-screen bg-black text-white">
      {/* Header */}
      <div className="bg-white/5 backdrop-blur-xl border-b border-white/10">
        <div className="max-w-7xl mx-auto px-4 py-6">
          <div className="flex items-center justify-between mb-4">
            <Link
              href="/problems"
              className="text-gray-400 hover:text-white transition-colors flex items-center space-x-2"
            >
              <span>‚Üê</span>
              <span>Back to Problems</span>
            </Link>
            <div className="flex items-center space-x-4">
              <span className="text-sm font-mono text-gray-400 bg-white/10 px-3 py-1 rounded-full">
                #{problem.leetcodeNumber}
              </span>
              <span
                className={`text-xs font-semibold px-3 py-1 rounded-full bg-gradient-to-r ${getDifficultyColor(
                  problem.difficulty
                )} text-black`}
              >
                {problem.difficulty.toUpperCase()}
              </span>
            </div>
          </div>
          <h1 className="text-3xl md:text-4xl font-bold bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent">
            {problem.title}
          </h1>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 py-8">
        {/* Tab Navigation */}
        <div className="flex flex-wrap gap-2 mb-8">
          {tabs.map((tab) => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id)}
              className={`flex items-center space-x-2 px-4 py-3 rounded-xl transition-all duration-300 ${
                activeTab === tab.id
                  ? "bg-gradient-to-r from-purple-600 to-blue-600 text-white"
                  : "bg-white/5 text-gray-400 hover:text-white hover:bg-white/10"
              }`}
            >
              <span>{tab.icon}</span>
              <span className="hidden sm:block">{tab.label}</span>
            </button>
          ))}
        </div>

        {/* Content */}
        <div className="bg-white/5 backdrop-blur-xl rounded-3xl p-8">
          {activeTab === "leetcode" && (
            <div className="space-y-8">
              <div>
                <h2 className="text-2xl font-bold text-purple-400 mb-4">
                  üßÆ Algorithm Problem
                </h2>
                <div className="bg-white/5 rounded-2xl p-6">
                  <h3 className="text-lg font-semibold text-white mb-3">
                    Problem Description
                  </h3>
                  <p className="text-gray-300 leading-relaxed whitespace-pre-wrap">
                    {problem.description}
                  </p>
                </div>
              </div>

              <div>
                <h3 className="text-lg font-semibold text-white mb-3">
                  Solution
                </h3>
                <div className="bg-gray-900 rounded-2xl p-6 font-mono">
                  <pre className="text-green-300 text-sm overflow-x-auto whitespace-pre-wrap">
                    {problem.solution}
                  </pre>
                </div>
              </div>

              <div className="grid md:grid-cols-2 gap-6">
                <div className="bg-white/5 rounded-2xl p-6">
                  <h3 className="text-lg font-semibold text-white mb-2">
                    Time Complexity
                  </h3>
                  <p className="text-green-400 font-mono text-xl">
                    {problem.timeComplexity}
                  </p>
                </div>
                <div className="bg-white/5 rounded-2xl p-6">
                  <h3 className="text-lg font-semibold text-white mb-2">
                    Space Complexity
                  </h3>
                  <p className="text-blue-400 font-mono text-xl">
                    {problem.spaceComplexity}
                  </p>
                </div>
              </div>

              <div>
                <h3 className="text-lg font-semibold text-white mb-3">Tags</h3>
                <div className="flex flex-wrap gap-2">
                  {problem.tags.map((tag, index) => (
                    <span
                      key={index}
                      className="bg-purple-500/20 text-purple-300 px-3 py-1 rounded-full text-sm"
                    >
                      {tag}
                    </span>
                  ))}
                </div>
              </div>
            </div>
          )}

          {activeTab === "lld" && (
            <div className="space-y-8">
              <h2 className="text-2xl font-bold text-purple-400 mb-4">
                üé® Frontend Design Application
              </h2>

              <div className="bg-white/5 rounded-2xl p-6">
                <h3 className="text-lg font-semibold text-white mb-3">
                  Design Challenge
                </h3>
                <p className="text-gray-300 leading-relaxed whitespace-pre-wrap">
                  {problem.lldQuestion}
                </p>
              </div>

              <div className="bg-white/5 rounded-2xl p-6">
                <h3 className="text-lg font-semibold text-white mb-3">
                  Approach
                </h3>
                <p className="text-gray-300 leading-relaxed whitespace-pre-wrap">
                  {problem.lldApproach}
                </p>
              </div>

              <div>
                <h3 className="text-lg font-semibold text-white mb-3">
                  Implementation
                </h3>
                <div className="bg-gray-900 rounded-2xl p-6 font-mono">
                  <pre className="text-green-300 text-sm overflow-x-auto whitespace-pre-wrap">
                    {problem.lldCodeExample}
                  </pre>
                </div>
              </div>

              <div>
                <h3 className="text-lg font-semibold text-white mb-3">
                  Tech Stack
                </h3>
                <div className="flex flex-wrap gap-2">
                  {problem.lldTechStack.map((tech, index) => (
                    <span
                      key={index}
                      className="bg-blue-500/20 text-blue-300 px-3 py-1 rounded-full text-sm"
                    >
                      {tech}
                    </span>
                  ))}
                </div>
              </div>
            </div>
          )}

          {activeTab === "hld" && (
            <div className="space-y-8">
              <h2 className="text-2xl font-bold text-green-400 mb-4">
                ‚öôÔ∏è Backend Design Application
              </h2>

              <div className="bg-white/5 rounded-2xl p-6">
                <h3 className="text-lg font-semibold text-white mb-3">
                  System Challenge
                </h3>
                <p className="text-gray-300 leading-relaxed whitespace-pre-wrap">
                  {problem.hldQuestion}
                </p>
              </div>

              <div className="bg-white/5 rounded-2xl p-6">
                <h3 className="text-lg font-semibold text-white mb-3">
                  Approach
                </h3>
                <p className="text-gray-300 leading-relaxed whitespace-pre-wrap">
                  {problem.hldApproach}
                </p>
              </div>

              <div className="bg-white/5 rounded-2xl p-6">
                <h3 className="text-lg font-semibold text-white mb-3">
                  Architecture
                </h3>
                <p className="text-gray-300 leading-relaxed">
                  {problem.hldArchitecture}
                </p>
              </div>

              <div>
                <h3 className="text-lg font-semibold text-white mb-3">
                  Tech Stack
                </h3>
                <div className="flex flex-wrap gap-2">
                  {problem.hldTechStack.map((tech, index) => (
                    <span
                      key={index}
                      className="bg-green-500/20 text-green-300 px-3 py-1 rounded-full text-sm"
                    >
                      {tech}
                    </span>
                  ))}
                </div>
              </div>
            </div>
          )}

          {activeTab === "system" && (
            <div className="space-y-8">
              <h2 className="text-2xl font-bold text-orange-400 mb-4">
                üèóÔ∏è Large Scale System Design
              </h2>

              <div className="bg-white/5 rounded-2xl p-6">
                <h3 className="text-lg font-semibold text-white mb-3">
                  System Design Challenge
                </h3>
                <p className="text-gray-300 leading-relaxed whitespace-pre-wrap">
                  {problem.systemDesignQuestion}
                </p>
              </div>

              <div className="bg-white/5 rounded-2xl p-6">
                <h3 className="text-lg font-semibold text-white mb-3">
                  Design Approach
                </h3>
                <p className="text-gray-300 leading-relaxed whitespace-pre-wrap">
                  {problem.systemDesignApproach}
                </p>
              </div>

              {problem.systemDesignDiagram && (
                <div className="bg-white/5 rounded-2xl p-6">
                  <h3 className="text-lg font-semibold text-white mb-3">
                    System Architecture
                  </h3>
                  <p className="text-gray-300 leading-relaxed">
                    {problem.systemDesignDiagram}
                  </p>
                </div>
              )}

              <div className="bg-white/5 rounded-2xl p-6">
                <h3 className="text-lg font-semibold text-white mb-3">
                  Scaling Considerations
                </h3>
                <p className="text-gray-300 leading-relaxed whitespace-pre-wrap">
                  {problem.scalingConsiderations}
                </p>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/app/api/problems/create/route.ts">
import { NextResponse } from 'next/server';
import { cookies } from 'next/headers';
import fs from 'fs';
import path from 'path';

// Simple file-based storage for now
const PROBLEMS_DIR = path.join(process.cwd(), 'data', 'problems');

// Ensure problems directory exists
if (!fs.existsSync(PROBLEMS_DIR)) {
  fs.mkdirSync(PROBLEMS_DIR, { recursive: true });
}

export async function POST(request: Request) {
  try {
    // Check admin authentication
    const cookieStore = cookies();
    const isAuthenticated = cookieStore.get('admin-auth')?.value === 'authenticated';
    
    if (!isAuthenticated) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const problemData = await request.json();
    
    // Add timestamp and generate ID
    const timestamp = new Date().toISOString();
    const problemId = `problem-${problemData.leetcodeNumber}-${Date.now()}`;
    
    const enrichedData = {
      ...problemData,
      id: problemId,
      createdAt: timestamp,
      updatedAt: timestamp
    };

    // Save to JSON file
    const fileName = `${problemId}.json`;
    const filePath = path.join(PROBLEMS_DIR, fileName);
    
    fs.writeFileSync(filePath, JSON.stringify(enrichedData, null, 2));
    
    console.log(`‚úÖ Problem saved: ${fileName}`);
    console.log('üìÅ Data location:', filePath);
    
    return NextResponse.json({ 
      success: true, 
      problemId,
      message: 'Problem saved successfully!' 
    });

  } catch (error) {
    console.error('‚ùå Error saving problem:', error);
    return NextResponse.json(
      { error: 'Failed to save problem' }, 
      { status: 500 }
    );
  }
}

// Optional: GET endpoint to retrieve problems
export async function GET() {
  try {
    const cookieStore = cookies();
    const isAuthenticated = cookieStore.get('admin-auth')?.value === 'authenticated';
    
    if (!isAuthenticated) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    if (!fs.existsSync(PROBLEMS_DIR)) {
      return NextResponse.json({ problems: [] });
    }

    const files = fs.readdirSync(PROBLEMS_DIR);
    const problems = files
      .filter(file => file.endsWith('.json'))
      .map(file => {
        const filePath = path.join(PROBLEMS_DIR, file);
        const content = fs.readFileSync(filePath, 'utf-8');
        return JSON.parse(content);
      })
      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());

    return NextResponse.json({ problems });

  } catch (error) {
    console.error('‚ùå Error fetching problems:', error);
    return NextResponse.json(
      { error: 'Failed to fetch problems' }, 
      { status: 500 }
    );
  }
}
</file>

<file path="src/app/api/problems/page.tsx">
"use client";
import { useState, useEffect } from "react";
import Link from "next/link";

interface Problem {
  id: string;
  leetcodeNumber: number;
  title: string;
  difficulty: "Easy" | "Medium" | "Hard";
  description: string;
  tags: string[];
  createdAt: string;
}

export default function ProblemsPage() {
  const [problems, setProblems] = useState<Problem[]>([]);
  const [loading, setLoading] = useState(true);
  const [filter, setFilter] = useState<"All" | "Easy" | "Medium" | "Hard">(
    "All"
  );

  useEffect(() => {
    fetchProblems();
  }, []);

  const fetchProblems = async () => {
    try {
      const response = await fetch("/api/problems");
      const data = await response.json();
      setProblems(data.problems || []);
    } catch (error) {
      console.error("Failed to fetch problems:", error);
    } finally {
      setLoading(false);
    }
  };

  const filteredProblems = problems.filter(
    (problem) => filter === "All" || problem.difficulty === filter
  );

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case "Easy":
        return "from-green-400 to-emerald-400";
      case "Medium":
        return "from-yellow-400 to-orange-400";
      case "Hard":
        return "from-red-400 to-pink-400";
      default:
        return "from-gray-400 to-gray-500";
    }
  };

  const getDifficultyBg = (difficulty: string) => {
    switch (difficulty) {
      case "Easy":
        return "bg-green-500/20 text-green-300 border-green-500/30";
      case "Medium":
        return "bg-yellow-500/20 text-yellow-300 border-yellow-500/30";
      case "Hard":
        return "bg-red-500/20 text-red-300 border-red-500/30";
      default:
        return "bg-gray-500/20 text-gray-300 border-gray-500/30";
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-black flex items-center justify-center">
        <div className="text-white text-xl">Loading problems...</div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-black text-white">
      {/* Header */}
      <div className="bg-white/5 backdrop-blur-xl border-b border-white/10">
        <div className="max-w-7xl mx-auto px-4 py-8">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-4xl font-bold bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent">
                LeetCode ‚Üí Engineering
              </h1>
              <p className="text-gray-400 mt-2">
                {problems.length} problems bridging algorithms to real systems
              </p>
            </div>
            <Link
              href="/"
              className="bg-white/10 hover:bg-white/20 px-4 py-2 rounded-xl transition-all duration-300"
            >
              ‚Üê Back to Home
            </Link>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 py-8">
        {/* Filters */}
        <div className="flex flex-wrap gap-4 mb-8">
          {["All", "Easy", "Medium", "Hard"].map((difficulty) => (
            <button
              key={difficulty}
              onClick={() => setFilter(difficulty as any)}
              className={`px-6 py-3 rounded-xl font-semibold transition-all duration-300 ${
                filter === difficulty
                  ? "bg-gradient-to-r from-purple-600 to-blue-600 text-white"
                  : "bg-white/10 text-gray-400 hover:text-white hover:bg-white/20"
              }`}
            >
              {difficulty}
              {difficulty !== "All" && (
                <span className="ml-2 text-xs opacity-70">
                  ({problems.filter((p) => p.difficulty === difficulty).length})
                </span>
              )}
            </button>
          ))}
        </div>

        {/* Problems Grid */}
        {filteredProblems.length === 0 ? (
          <div className="text-center py-16">
            <div className="text-6xl mb-4">ü§î</div>
            <h2 className="text-2xl font-bold text-gray-400 mb-2">
              No problems found
            </h2>
            <p className="text-gray-500">
              {filter !== "All"
                ? `No ${filter} problems available yet.`
                : "Start by creating your first problem in the admin dashboard."}
            </p>
          </div>
        ) : (
          <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
            {filteredProblems.map((problem, index) => (
              <Link
                key={problem.id}
                href={`/problems/${problem.id}`}
                className="group"
              >
                <div className="bg-white/5 backdrop-blur-xl border border-white/10 rounded-3xl p-6 transition-all duration-500 hover:scale-105 hover:bg-white/10 hover:border-white/20 h-full">
                  {/* Header */}
                  <div className="flex items-center justify-between mb-4">
                    <span className="text-sm font-mono text-gray-400 bg-white/10 px-3 py-1 rounded-full">
                      #{problem.leetcodeNumber}
                    </span>
                    <span
                      className={`text-xs font-semibold px-3 py-1 rounded-full border ${getDifficultyBg(
                        problem.difficulty
                      )}`}
                    >
                      {problem.difficulty.toUpperCase()}
                    </span>
                  </div>

                  {/* Title */}
                  <h3 className="text-xl font-bold mb-3 text-white group-hover:bg-gradient-to-r group-hover:from-purple-200 group-hover:to-blue-200 group-hover:bg-clip-text group-hover:text-transparent transition-all duration-300">
                    {problem.title}
                  </h3>

                  {/* Description */}
                  <p className="text-gray-400 text-sm leading-relaxed mb-4 line-clamp-3">
                    {problem.description}
                  </p>

                  {/* Tags */}
                  <div className="flex flex-wrap gap-2 mb-4">
                    {problem.tags.slice(0, 3).map((tag, tagIndex) => (
                      <span
                        key={tagIndex}
                        className="text-xs bg-purple-500/20 text-purple-300 px-2 py-1 rounded"
                      >
                        {tag}
                      </span>
                    ))}
                    {problem.tags.length > 3 && (
                      <span className="text-xs text-gray-500">
                        +{problem.tags.length - 3} more
                      </span>
                    )}
                  </div>

                  {/* Read More */}
                  <div className="flex items-center text-sm text-purple-400 group-hover:text-purple-300 transition-colors">
                    <span>Read Full Analysis</span>
                    <span className="ml-2 group-hover:translate-x-1 transition-transform duration-300">
                      ‚Üí
                    </span>
                  </div>
                </div>
              </Link>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}
</file>

<file path="src/app/api/problems/route.ts">
import { NextResponse } from 'next/server';
import fs from 'fs';
import path from 'path';

const PROBLEMS_DIR = path.join(process.cwd(), 'data', 'problems');

export async function GET() {
  try {
    if (!fs.existsSync(PROBLEMS_DIR)) {
      return NextResponse.json({ problems: [] });
    }

    const files = fs.readdirSync(PROBLEMS_DIR);
    const problems = files
      .filter(file => file.endsWith('.json'))
      .map(file => {
        const filePath = path.join(PROBLEMS_DIR, file);
        const content = fs.readFileSync(filePath, 'utf-8');
        return JSON.parse(content);
      })
      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());

    return NextResponse.json({ problems });

  } catch (error) {
    console.error('‚ùå Error fetching problems:', error);
    return NextResponse.json(
      { error: 'Failed to fetch problems' }, 
      { status: 500 }
    );
  }
}
</file>

<file path="src/app/components/CodeEditor.tsx">
"use client";
import { useState, useRef, KeyboardEvent } from "react";

interface CodeEditorProps {
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  language?: string;
  height?: string;
}

export default function CodeEditor({
  value,
  onChange,
  placeholder = "Enter your code...",
  language = "typescript",
  height = "h-40",
}: CodeEditorProps) {
  const textareaRef = useRef<HTMLTextAreaElement>(null);
  const [lineCount, setLineCount] = useState(1);

  const handleKeyDown = (e: KeyboardEvent<HTMLTextAreaElement>) => {
    const textarea = e.currentTarget;
    const { selectionStart, selectionEnd } = textarea;

    // Handle Tab key for indentation
    if (e.key === "Tab") {
      e.preventDefault();

      if (e.shiftKey) {
        // Shift+Tab: Remove indentation
        const lines = value.split("\n");
        const start = value.lastIndexOf("\n", selectionStart - 1) + 1;
        const end = value.indexOf("\n", selectionEnd);
        const selectedText = value.substring(
          start,
          end === -1 ? value.length : end
        );

        if (selectedText.startsWith("  ")) {
          const newValue =
            value.substring(0, start) +
            selectedText.substring(2) +
            value.substring(end === -1 ? value.length : end);
          onChange(newValue);

          // Restore cursor position
          setTimeout(() => {
            if (textarea) {
              textarea.selectionStart = selectionStart - 2;
              textarea.selectionEnd = selectionEnd - 2;
            }
          }, 0);
        }
      } else {
        // Tab: Add indentation
        const newValue =
          value.substring(0, selectionStart) +
          "  " +
          value.substring(selectionEnd);
        onChange(newValue);

        // Move cursor after the inserted spaces
        setTimeout(() => {
          if (textarea) {
            textarea.selectionStart = textarea.selectionEnd =
              selectionStart + 2;
          }
        }, 0);
      }
    }

    // Handle Enter key for auto-indentation
    if (e.key === "Enter") {
      e.preventDefault();

      // Find current line indentation
      const lines = value.substring(0, selectionStart).split("\n");
      const currentLine = lines[lines.length - 1];
      const indentation = currentLine.match(/^(\s*)/)?.[1] || "";

      // Check if current line ends with { or : for extra indentation
      const needsExtraIndent =
        currentLine.trim().endsWith("{") ||
        currentLine.trim().endsWith(":") ||
        currentLine.trim().endsWith("(");

      const newIndentation = needsExtraIndent
        ? indentation + "  "
        : indentation;
      const newValue =
        value.substring(0, selectionStart) +
        "\n" +
        newIndentation +
        value.substring(selectionEnd);

      onChange(newValue);

      // Move cursor to end of new indentation
      setTimeout(() => {
        if (textarea) {
          const newPosition = selectionStart + 1 + newIndentation.length;
          textarea.selectionStart = textarea.selectionEnd = newPosition;
        }
      }, 0);
    }

    // Handle closing brackets
    if (e.key === "}" && !e.shiftKey) {
      const lines = value.substring(0, selectionStart).split("\n");
      const currentLine = lines[lines.length - 1];

      if (currentLine.trim() === "" && currentLine.length >= 2) {
        e.preventDefault();
        // Remove 2 spaces and add }
        const newValue =
          value.substring(0, selectionStart - 2) +
          "}" +
          value.substring(selectionEnd);
        onChange(newValue);

        setTimeout(() => {
          if (textarea) {
            textarea.selectionStart = textarea.selectionEnd =
              selectionStart - 1;
          }
        }, 0);
      }
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    const newValue = e.target.value;
    onChange(newValue);

    // Update line count
    const lines = newValue.split("\n").length;
    setLineCount(lines);
  };

  const addSyntaxHighlighting = (code: string) => {
    // Basic syntax highlighting for display
    return code
      .replace(
        /(function|const|let|var|if|else|for|while|return|class|interface|type|export|import|from|async|await)/g,
        '<span class="text-blue-400">$1</span>'
      )
      .replace(
        /(string|number|boolean|void|null|undefined)/g,
        '<span class="text-green-400">$1</span>'
      )
      .replace(
        /(".*?"|'.*?'|`.*?`)/g,
        '<span class="text-yellow-300">$1</span>'
      )
      .replace(/(\/\/.*$)/gm, '<span class="text-gray-500">$1</span>')
      .replace(/(\d+)/g, '<span class="text-purple-400">$1</span>');
  };

  return (
    <div className="relative bg-gray-900 rounded-xl border border-white/20 overflow-hidden">
      {/* Header */}
      <div className="flex items-center justify-between px-4 py-2 bg-gray-800 border-b border-white/10">
        <div className="flex items-center space-x-2">
          <div className="flex space-x-1">
            <div className="w-3 h-3 bg-red-500 rounded-full"></div>
            <div className="w-3 h-3 bg-yellow-500 rounded-full"></div>
            <div className="w-3 h-3 bg-green-500 rounded-full"></div>
          </div>
          <span className="text-gray-400 text-sm font-mono ml-4">
            {language}
          </span>
        </div>
        <div className="text-gray-400 text-sm">Lines: {lineCount}</div>
      </div>

      {/* Editor */}
      <div className="relative">
        {/* Line Numbers */}
        <div className="absolute left-0 top-0 z-10 bg-gray-800 border-r border-white/10 p-4 text-gray-500 font-mono text-sm leading-6 select-none">
          {Array.from({ length: lineCount }, (_, i) => (
            <div key={i + 1} className="text-right pr-2">
              {i + 1}
            </div>
          ))}
        </div>

        {/* Code Input */}
        <textarea
          ref={textareaRef}
          value={value}
          onChange={handleChange}
          onKeyDown={handleKeyDown}
          placeholder={placeholder}
          className={`w-full ${height} bg-transparent text-white font-mono text-sm leading-6 p-4 pl-16 resize-none focus:outline-none placeholder-gray-500`}
          spellCheck={false}
          autoComplete="off"
          autoCorrect="off"
          autoCapitalize="off"
        />

        {/* Syntax Highlighting Overlay (Optional - for display only) */}
        {value && (
          <div
            className="absolute top-0 left-16 p-4 pointer-events-none text-transparent font-mono text-sm leading-6 whitespace-pre-wrap break-words"
            dangerouslySetInnerHTML={{ __html: addSyntaxHighlighting(value) }}
          />
        )}
      </div>

      {/* Footer with shortcuts */}
      <div className="px-4 py-2 bg-gray-800 border-t border-white/10 text-xs text-gray-500">
        <div className="flex justify-between">
          <span>Tab: Indent ‚Ä¢ Shift+Tab: Unindent ‚Ä¢ Enter: Auto-indent</span>
          <span>Ctrl+/ : Comment</span>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="public/next.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
</file>

<file path="public/vercel.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 283 64"><path fill="black" d="M141 16c-11 0-19 7-19 18s9 18 20 18c7 0 13-3 16-7l-7-5c-2 3-6 4-9 4-5 0-9-3-10-7h28v-3c0-11-8-18-19-18zm-9 15c1-4 4-7 9-7s8 3 9 7h-18zm117-15c-11 0-19 7-19 18s9 18 20 18c6 0 12-3 16-7l-8-5c-2 3-5 4-8 4-5 0-9-3-11-7h28l1-3c0-11-8-18-19-18zm-10 15c2-4 5-7 10-7s8 3 9 7h-19zm-39 3c0 6 4 10 10 10 4 0 7-2 9-5l8 5c-3 5-9 8-17 8-11 0-19-7-19-18s8-18 19-18c8 0 14 3 17 8l-8 5c-2-3-5-5-9-5-6 0-10 4-10 10zm83-29v46h-9V5h9zM37 0l37 64H0L37 0zm92 5-27 48L74 5h10l18 30 17-30h10zm59 12v10l-3-1c-6 0-10 4-10 10v15h-9V17h9v9c0-5 6-9 13-9z"/></svg>
</file>

<file path="src/app/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;
}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-start-rgb: 0, 0, 0;
    --background-end-rgb: 0, 0, 0;
  }
}

body {
  color: rgb(var(--foreground-rgb));
  background: linear-gradient(
      to bottom,
      transparent,
      rgb(var(--background-end-rgb))
    )
    rgb(var(--background-start-rgb));
}
</file>

<file path="src/app/layout.tsx">
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import './globals.css'

const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className={inter.className}>{children}</body>
    </html>
  )
}
</file>

<file path="src/app/page.tsx">
"use client";
import { useState, useEffect } from "react";
import Link from "next/link";

export default function Home() {
  const [isLoaded, setIsLoaded] = useState(false);
  const [hoveredCard, setHoveredCard] = useState<number | null>(null);

  useEffect(() => {
    setIsLoaded(true);
  }, []);

  const navigationItems = [
    { name: "Home", href: "/" },
    { name: "Problems", href: "/problems" },
    { name: "About", href: "#about" },
    { name: "Contact", href: "#contact" },
  ];

  return (
    <div className="min-h-screen bg-black text-white overflow-hidden">
      {/* Animated Background */}
      <div className="fixed inset-0 overflow-hidden">
        <div className="absolute inset-0 bg-gradient-to-br from-purple-900/20 via-blue-900/20 to-black"></div>
        <div className="absolute top-0 left-1/4 w-72 h-72 bg-purple-500/10 rounded-full blur-3xl animate-pulse"></div>
        <div className="absolute bottom-0 right-1/4 w-96 h-96 bg-blue-500/10 rounded-full blur-3xl animate-pulse delay-1000"></div>
        <div className="absolute top-1/2 left-1/2 w-64 h-64 bg-indigo-500/10 rounded-full blur-3xl animate-pulse delay-500"></div>
      </div>

      {/* Navigation */}
      <nav
        className={`relative z-50 backdrop-blur-xl bg-black/50 border-b border-white/10 transition-all duration-1000 ${
          isLoaded ? "translate-y-0 opacity-100" : "-translate-y-full opacity-0"
        }`}
      >
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <Link
              href="/"
              className="text-xl sm:text-2xl font-bold bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent hover:scale-105 transition-transform duration-300"
            >
              LeetCode ‚Üí Engineering
            </Link>
            <div className="hidden md:flex space-x-8">
              {navigationItems.map((item, index) => (
                <Link
                  key={item.name}
                  href={item.href}
                  className="text-gray-300 hover:text-white transition-all duration-300 hover:scale-105 relative group"
                  style={{ animationDelay: `${index * 100}ms` }}
                >
                  {item.name}
                  <span className="absolute -bottom-1 left-0 w-0 h-0.5 bg-gradient-to-r from-purple-400 to-blue-400 group-hover:w-full transition-all duration-300"></span>
                </Link>
              ))}
            </div>
            {/* Mobile Menu Button */}
            <button className="md:hidden p-2 group">
              <div className="w-6 h-0.5 bg-white mb-1 transition-all duration-300 group-hover:bg-purple-400"></div>
              <div className="w-6 h-0.5 bg-white mb-1 transition-all duration-300 group-hover:bg-purple-400"></div>
              <div className="w-6 h-0.5 bg-white transition-all duration-300 group-hover:bg-purple-400"></div>
            </button>
          </div>
        </div>
      </nav>

      {/* Hero Section */}
      <section className="relative z-10 pt-20 pb-16 sm:pt-32 sm:pb-24">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div
            className={`text-center transition-all duration-1000 delay-300 ${
              isLoaded
                ? "translate-y-0 opacity-100"
                : "translate-y-10 opacity-0"
            }`}
          >
            <h1 className="text-4xl sm:text-6xl lg:text-7xl font-bold mb-6 bg-gradient-to-r from-white via-purple-200 to-blue-200 bg-clip-text text-transparent leading-tight">
              From LeetCode
              <br className="hidden sm:block" />
              <span className="bg-gradient-to-r from-purple-400 via-blue-400 to-cyan-400 bg-clip-text text-transparent">
                to Real Engineering
              </span>
            </h1>
            <p className="text-lg sm:text-xl lg:text-2xl text-gray-300 mb-8 max-w-4xl mx-auto leading-relaxed">
              Bridging algorithmic thinking with production systems.
              <br className="hidden sm:block" />
              See how <span className="text-purple-400">
                data structures
              </span>{" "}
              power real applications.
            </p>

            {/* Animated Stats */}
            <div className="grid grid-cols-3 gap-4 sm:gap-8 max-w-2xl mx-auto mb-12">
              {[
                {
                  num: 25,
                  label: "Problems",
                  color: "from-purple-400 to-pink-400",
                },
                {
                  num: 8,
                  label: "Tech Stacks",
                  color: "from-blue-400 to-cyan-400",
                },
                {
                  num: 12,
                  label: "Architectures",
                  color: "from-green-400 to-teal-400",
                },
              ].map((stat, index) => (
                <div
                  key={index}
                  className={`group cursor-pointer transition-all duration-500 delay-${
                    index * 100
                  } ${
                    isLoaded
                      ? "translate-y-0 opacity-100"
                      : "translate-y-10 opacity-0"
                  }`}
                  onMouseEnter={() => setHoveredCard(index)}
                  onMouseLeave={() => setHoveredCard(null)}
                >
                  <div
                    className={`bg-white/5 backdrop-blur-xl border border-white/10 rounded-2xl p-4 sm:p-6 transition-all duration-300 ${
                      hoveredCard === index
                        ? "scale-110 bg-white/10"
                        : "hover:scale-105"
                    }`}
                  >
                    <div
                      className={`text-2xl sm:text-4xl font-bold bg-gradient-to-r ${stat.color} bg-clip-text text-transparent mb-2`}
                    >
                      {stat.num}+
                    </div>
                    <div className="text-sm sm:text-base text-gray-400 group-hover:text-gray-300 transition-colors">
                      {stat.label}
                    </div>
                  </div>
                </div>
              ))}
            </div>

            <Link href="/problems">
              <button className="group relative bg-gradient-to-r from-purple-600 to-blue-600 text-white px-8 py-4 rounded-full font-semibold text-lg transition-all duration-300 hover:scale-105 hover:shadow-2xl hover:shadow-purple-500/25">
                <span className="relative z-10 flex items-center space-x-2">
                  <span>Explore Problems</span>
                  <span className="group-hover:translate-x-1 transition-transform duration-300">
                    ‚Üí
                  </span>
                </span>
                <div className="absolute inset-0 bg-gradient-to-r from-purple-500 to-blue-500 rounded-full opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                <div className="absolute inset-0 bg-gradient-to-r from-purple-400 to-blue-400 rounded-full opacity-0 group-hover:opacity-100 transition-opacity duration-300 blur-lg"></div>
              </button>
            </Link>
          </div>
        </div>
      </section>

      {/* Why This Approach */}
      <section id="about" className="relative z-10 py-16 sm:py-24">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div
            className={`text-center mb-16 transition-all duration-1000 delay-500 ${
              isLoaded
                ? "translate-y-0 opacity-100"
                : "translate-y-10 opacity-0"
            }`}
          >
            <h2 className="text-3xl sm:text-5xl font-bold mb-6 bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent">
              Why This Approach?
            </h2>
            <p className="text-lg sm:text-xl text-gray-400 max-w-3xl mx-auto">
              Traditional LeetCode preparation misses the bigger picture. I show
              you the <span className="text-purple-400">real connections</span>.
            </p>
          </div>

          <div className="grid md:grid-cols-3 gap-8">
            {[
              {
                icon: "üé®",
                title: "Frontend Magic",
                subtitle: "React ‚Ä¢ Vue ‚Ä¢ Svelte",
                description:
                  "Array algorithms become data visualization. Graph traversal powers component routing. Dynamic programming optimizes render cycles.",
                gradient: "from-purple-500/20 to-pink-500/20",
                border: "border-purple-500/30",
              },
              {
                icon: "‚öôÔ∏è",
                title: "Backend Power",
                subtitle: "Node.js ‚Ä¢ Python ‚Ä¢ Go",
                description:
                  "Sorting algorithms scale databases. Tree structures organize microservices. Hash tables power distributed caching systems.",
                gradient: "from-blue-500/20 to-cyan-500/20",
                border: "border-blue-500/30",
              },
              {
                icon: "üèóÔ∏è",
                title: "System Architecture",
                subtitle: "AWS ‚Ä¢ Kubernetes ‚Ä¢ Docker",
                description:
                  "Consensus algorithms in distributed systems. Load balancing with graph theory. Consistent hashing in cloud architecture.",
                gradient: "from-green-500/20 to-teal-500/20",
                border: "border-green-500/30",
              },
            ].map((item, index) => (
              <div
                key={index}
                className={`group cursor-pointer transition-all duration-700 delay-${
                  600 + index * 100
                } ${
                  isLoaded
                    ? "translate-y-0 opacity-100"
                    : "translate-y-10 opacity-0"
                }`}
              >
                <div
                  className={`h-full bg-gradient-to-br ${item.gradient} backdrop-blur-xl border ${item.border} rounded-3xl p-6 sm:p-8 transition-all duration-500 group-hover:scale-105 group-hover:shadow-2xl`}
                >
                  <div className="text-4xl sm:text-5xl mb-4 group-hover:scale-110 transition-transform duration-300">
                    {item.icon}
                  </div>
                  <h3 className="text-xl sm:text-2xl font-bold text-white mb-2 group-hover:text-purple-200 transition-colors">
                    {item.title}
                  </h3>
                  <p className="text-sm text-purple-300 mb-4 font-mono">
                    {item.subtitle}
                  </p>
                  <p className="text-gray-300 leading-relaxed group-hover:text-gray-200 transition-colors">
                    {item.description}
                  </p>
                </div>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Featured Problem - Premium Card */}
      <section className="relative z-10 py-16 sm:py-24">
        <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
          <div
            className={`text-center mb-12 transition-all duration-1000 delay-700 ${
              isLoaded
                ? "translate-y-0 opacity-100"
                : "translate-y-10 opacity-0"
            }`}
          >
            <h2 className="text-3xl sm:text-5xl font-bold mb-4 bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent">
              Featured Deep Dive
            </h2>
          </div>

          <Link href="/problems">
            <div
              className={`relative group cursor-pointer transition-all duration-1000 delay-800 ${
                isLoaded
                  ? "translate-y-0 opacity-100"
                  : "translate-y-10 opacity-0"
              }`}
            >
              <div className="absolute inset-0 bg-gradient-to-r from-purple-600 to-blue-600 rounded-3xl blur-xl opacity-25 group-hover:opacity-40 transition-opacity duration-500"></div>
              <div className="relative bg-black/40 backdrop-blur-xl border border-white/20 rounded-3xl p-6 sm:p-8 lg:p-12 group-hover:border-white/30 transition-all duration-500">
                <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-8">
                  <div className="flex items-center space-x-4 mb-4 sm:mb-0">
                    <span className="text-sm font-mono text-gray-400 bg-white/5 px-3 py-1 rounded-full">
                      #001
                    </span>
                    <span className="bg-gradient-to-r from-green-400 to-emerald-400 text-black px-3 py-1 rounded-full text-sm font-semibold">
                      EASY
                    </span>
                  </div>
                  <div className="flex space-x-2">
                    <span className="text-xs bg-purple-500/20 text-purple-300 px-2 py-1 rounded">
                      Array
                    </span>
                    <span className="text-xs bg-blue-500/20 text-blue-300 px-2 py-1 rounded">
                      Hash Table
                    </span>
                  </div>
                </div>

                <h3 className="text-2xl sm:text-4xl font-bold mb-4 text-white group-hover:bg-gradient-to-r group-hover:from-purple-200 group-hover:to-blue-200 group-hover:bg-clip-text group-hover:text-transparent transition-all duration-500">
                  Two Sum Problem
                </h3>
                <p className="text-lg sm:text-xl text-gray-300 mb-12 leading-relaxed">
                  Given an array of integers, return indices of two numbers that
                  add up to a specific target.
                </p>

                <div className="grid lg:grid-cols-3 gap-6 mb-8">
                  {[
                    {
                      title: "E-commerce Cart Logic",
                      tech: "React + TypeScript",
                      description:
                        "Find products that fit within user's budget constraints using optimized lookup",
                      icon: "üõí",
                      gradient: "from-purple-500/10 to-pink-500/10",
                      accent: "purple",
                    },
                    {
                      title: "User Matching API",
                      tech: "Node.js + Redis",
                      description:
                        "Match users with complementary skills for team formation in O(n) time",
                      icon: "üë•",
                      gradient: "from-blue-500/10 to-cyan-500/10",
                      accent: "blue",
                    },
                    {
                      title: "Load Balancer Design",
                      tech: "Kubernetes + AWS",
                      description:
                        "Distribute requests across server pairs using consistent hashing principles",
                      icon: "‚öñÔ∏è",
                      gradient: "from-green-500/10 to-teal-500/10",
                      accent: "green",
                    },
                  ].map((app, index) => (
                    <div
                      key={index}
                      className={`bg-gradient-to-br ${app.gradient} border border-white/10 rounded-2xl p-6 transition-all duration-500 hover:scale-105 hover:border-${app.accent}-500/30`}
                    >
                      <div className="text-3xl mb-4">{app.icon}</div>
                      <h4 className="text-lg font-semibold text-white mb-2">
                        {app.title}
                      </h4>
                      <p
                        className={`text-sm text-${app.accent}-300 mb-3 font-mono`}
                      >
                        {app.tech}
                      </p>
                      <p className="text-gray-400 text-sm leading-relaxed">
                        {app.description}
                      </p>
                    </div>
                  ))}
                </div>

                <div className="text-center">
                  <div className="group relative bg-gradient-to-r from-purple-600 to-blue-600 text-white px-8 py-4 rounded-2xl font-semibold transition-all duration-300 hover:scale-105 hover:shadow-2xl hover:shadow-purple-500/25 inline-flex">
                    <span className="relative z-10 flex items-center space-x-2">
                      <span>Read Full Analysis</span>
                      <span className="group-hover:translate-x-1 transition-transform duration-300">
                        ‚Üí
                      </span>
                    </span>
                    <div className="absolute inset-0 bg-gradient-to-r from-purple-500 to-blue-500 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                  </div>
                </div>
              </div>
            </div>
          </Link>
        </div>
      </section>

      {/* Contact Section */}
      <section id="contact" className="relative z-10 py-16 sm:py-24">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
          <div
            className={`transition-all duration-1000 delay-900 ${
              isLoaded
                ? "translate-y-0 opacity-100"
                : "translate-y-10 opacity-0"
            }`}
          >
            <h2 className="text-3xl sm:text-4xl font-bold mb-6 bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent">
              Ready to Bridge the Gap?
            </h2>
            <p className="text-lg text-gray-400 mb-8 max-w-2xl mx-auto">
              Start your journey from algorithmic puzzles to production-ready
              engineering solutions.
            </p>
            <Link href="/problems">
              <button className="bg-gradient-to-r from-purple-600 to-blue-600 text-white px-8 py-4 rounded-2xl font-semibold text-lg transition-all duration-300 hover:scale-105 hover:shadow-2xl hover:shadow-purple-500/25">
                Start Learning Now
              </button>
            </Link>
          </div>
        </div>
      </section>

      {/* Footer */}
      <footer className="relative z-10 border-t border-white/10 bg-black/50 backdrop-blur-xl">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="flex flex-col md:flex-row justify-between items-center">
            <div className="text-lg font-bold bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent mb-4 md:mb-0">
              LeetCode ‚Üí Engineering
            </div>
            <div className="flex space-x-6">
              {navigationItems.map((item) => (
                <Link
                  key={item.name}
                  href={item.href}
                  className="text-gray-400 hover:text-white transition-colors text-sm"
                >
                  {item.name}
                </Link>
              ))}
            </div>
          </div>
          <div className="border-t border-white/10 mt-8 pt-8 text-center text-gray-500 text-sm">
            <p>
              &copy; 2025 LeetCode ‚Üí Engineering. Bridging algorithms to
              real-world systems.
            </p>
          </div>
        </div>
      </footer>
    </div>
  );
}
</file>

<file path=".eslintrc.json">
{
  "extends": "next/core-web-vitals"
}
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="next.config.js">
/** @type {import('next').NextConfig} */
const nextConfig = {}

module.exports = nextConfig
</file>

<file path="package.json">
{
  "name": "my-smooth-blog",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "gray-matter": "^4.0.3",
    "next": "13.5.11",
    "react": "^18",
    "react-dom": "^18",
    "remark": "^15.0.1",
    "remark-html": "^16.0.1"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "autoprefixer": "^10",
    "eslint": "^8",
    "eslint-config-next": "13.5.11",
    "postcss": "^8",
    "tailwindcss": "^3",
    "typescript": "^5"
  }
}
</file>

<file path="postcss.config.js">
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="README.md">
This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/basic-features/font-optimization) to automatically optimize and load Inter, a custom Google Font.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.
</file>

<file path="tailwind.config.ts">
import type { Config } from 'tailwindcss'

const config: Config = {
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      backgroundImage: {
        'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',
        'gradient-conic':
          'conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))',
      },
    },
  },
  plugins: [],
}
export default config
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

</files>
