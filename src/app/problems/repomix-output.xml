This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
[id]/
  page.tsx
page.tsx
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="[id]/page.tsx">
"use client";
import { useState, useEffect } from "react";
import Link from "next/link";
import { useParams } from "next/navigation";

interface Problem {
  id: string;
  leetcodeNumber: number;
  title: string;
  difficulty: "Easy" | "Medium" | "Hard";
  description: string;
  solution: string;
  timeComplexity: string;
  spaceComplexity: string;
  tags: string[];
  lldQuestion: string;
  lldApproach: string;
  lldTechStack: string[];
  lldCodeExample: string;
  hldQuestion: string;
  hldApproach: string;
  hldTechStack: string[];
  hldArchitecture: string;
  systemDesignQuestion: string;
  systemDesignApproach: string;
  systemDesignDiagram: string;
  scalingConsiderations: string;
  createdAt: string;
}

export default function ProblemDetailPage() {
  const params = useParams();
  const [problem, setProblem] = useState<Problem | null>(null);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState("leetcode");

  useEffect(() => {
    fetchProblem();
  }, [params.id]);

  const fetchProblem = async () => {
    try {
      const response = await fetch("/api/problems");
      const data = await response.json();
      const foundProblem = data.problems?.find(
        (p: Problem) => p.id === params.id
      );
      setProblem(foundProblem || null);
    } catch (error) {
      console.error("Failed to fetch problem:", error);
    } finally {
      setLoading(false);
    }
  };

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case "Easy":
        return "from-green-400 to-emerald-400";
      case "Medium":
        return "from-yellow-400 to-orange-400";
      case "Hard":
        return "from-red-400 to-pink-400";
      default:
        return "from-gray-400 to-gray-500";
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-black flex items-center justify-center">
        <div className="text-white text-xl">Loading problem...</div>
      </div>
    );
  }

  if (!problem) {
    return (
      <div className="min-h-screen bg-black flex items-center justify-center">
        <div className="text-center">
          <div className="text-6xl mb-4">üòµ</div>
          <h1 className="text-2xl font-bold text-white mb-4">
            Problem Not Found
          </h1>
          <Link
            href="/problems"
            className="bg-gradient-to-r from-purple-600 to-blue-600 text-white px-6 py-3 rounded-xl font-semibold hover:scale-105 transition-all duration-300"
          >
            ‚Üê Back to Problems
          </Link>
        </div>
      </div>
    );
  }

  const tabs = [
    { id: "leetcode", label: "Algorithm", icon: "üßÆ" },
    { id: "lld", label: "Frontend Design", icon: "üé®" },
    { id: "hld", label: "Backend Design", icon: "‚öôÔ∏è" },
    { id: "system", label: "System Design", icon: "üèóÔ∏è" },
  ];

  return (
    <div className="min-h-screen bg-black text-white">
      {/* Header */}
      <div className="bg-white/5 backdrop-blur-xl border-b border-white/10">
        <div className="max-w-7xl mx-auto px-4 py-6">
          <div className="flex items-center justify-between mb-4">
            <Link
              href="/problems"
              className="text-gray-400 hover:text-white transition-colors flex items-center space-x-2"
            >
              <span>‚Üê</span>
              <span>Back to Problems</span>
            </Link>
            <div className="flex items-center space-x-4">
              <span className="text-sm font-mono text-gray-400 bg-white/10 px-3 py-1 rounded-full">
                #{problem.leetcodeNumber}
              </span>
              <span
                className={`text-xs font-semibold px-3 py-1 rounded-full bg-gradient-to-r ${getDifficultyColor(
                  problem.difficulty
                )} text-black`}
              >
                {problem.difficulty.toUpperCase()}
              </span>
            </div>
          </div>
          <h1 className="text-3xl md:text-4xl font-bold bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent">
            {problem.title}
          </h1>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 py-8">
        {/* Tab Navigation */}
        <div className="flex flex-wrap gap-2 mb-8">
          {tabs.map((tab) => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id)}
              className={`flex items-center space-x-2 px-4 py-3 rounded-xl transition-all duration-300 ${
                activeTab === tab.id
                  ? "bg-gradient-to-r from-purple-600 to-blue-600 text-white"
                  : "bg-white/5 text-gray-400 hover:text-white hover:bg-white/10"
              }`}
            >
              <span>{tab.icon}</span>
              <span className="hidden sm:block">{tab.label}</span>
            </button>
          ))}
        </div>

        {/* Content */}
        <div className="bg-white/5 backdrop-blur-xl rounded-3xl p-8">
          {activeTab === "leetcode" && (
            <div className="space-y-8">
              <div>
                <h2 className="text-2xl font-bold text-purple-400 mb-4">
                  üßÆ Algorithm Problem
                </h2>
                <div className="bg-white/5 rounded-2xl p-6">
                  <h3 className="text-lg font-semibold text-white mb-3">
                    Problem Description
                  </h3>
                  <p className="text-gray-300 leading-relaxed whitespace-pre-wrap">
                    {problem.description}
                  </p>
                </div>
              </div>

              <div>
                <h3 className="text-lg font-semibold text-white mb-3">
                  Solution
                </h3>
                <div className="bg-gray-900 rounded-2xl p-6 font-mono">
                  <pre className="text-green-300 text-sm overflow-x-auto whitespace-pre-wrap">
                    {problem.solution}
                  </pre>
                </div>
              </div>

              <div className="grid md:grid-cols-2 gap-6">
                <div className="bg-white/5 rounded-2xl p-6">
                  <h3 className="text-lg font-semibold text-white mb-2">
                    Time Complexity
                  </h3>
                  <p className="text-green-400 font-mono text-xl">
                    {problem.timeComplexity}
                  </p>
                </div>
                <div className="bg-white/5 rounded-2xl p-6">
                  <h3 className="text-lg font-semibold text-white mb-2">
                    Space Complexity
                  </h3>
                  <p className="text-blue-400 font-mono text-xl">
                    {problem.spaceComplexity}
                  </p>
                </div>
              </div>

              <div>
                <h3 className="text-lg font-semibold text-white mb-3">Tags</h3>
                <div className="flex flex-wrap gap-2">
                  {problem.tags.map((tag, index) => (
                    <span
                      key={index}
                      className="bg-purple-500/20 text-purple-300 px-3 py-1 rounded-full text-sm"
                    >
                      {tag}
                    </span>
                  ))}
                </div>
              </div>
            </div>
          )}

          {activeTab === "lld" && (
            <div className="space-y-8">
              <h2 className="text-2xl font-bold text-purple-400 mb-4">
                üé® Frontend Design Application
              </h2>

              <div className="bg-white/5 rounded-2xl p-6">
                <h3 className="text-lg font-semibold text-white mb-3">
                  Design Challenge
                </h3>
                <p className="text-gray-300 leading-relaxed whitespace-pre-wrap">
                  {problem.lldQuestion}
                </p>
              </div>

              <div className="bg-white/5 rounded-2xl p-6">
                <h3 className="text-lg font-semibold text-white mb-3">
                  Approach
                </h3>
                <p className="text-gray-300 leading-relaxed whitespace-pre-wrap">
                  {problem.lldApproach}
                </p>
              </div>

              <div>
                <h3 className="text-lg font-semibold text-white mb-3">
                  Implementation
                </h3>
                <div className="bg-gray-900 rounded-2xl p-6 font-mono">
                  <pre className="text-green-300 text-sm overflow-x-auto whitespace-pre-wrap">
                    {problem.lldCodeExample}
                  </pre>
                </div>
              </div>

              <div>
                <h3 className="text-lg font-semibold text-white mb-3">
                  Tech Stack
                </h3>
                <div className="flex flex-wrap gap-2">
                  {problem.lldTechStack.map((tech, index) => (
                    <span
                      key={index}
                      className="bg-blue-500/20 text-blue-300 px-3 py-1 rounded-full text-sm"
                    >
                      {tech}
                    </span>
                  ))}
                </div>
              </div>
            </div>
          )}

          {activeTab === "hld" && (
            <div className="space-y-8">
              <h2 className="text-2xl font-bold text-green-400 mb-4">
                ‚öôÔ∏è Backend Design Application
              </h2>

              <div className="bg-white/5 rounded-2xl p-6">
                <h3 className="text-lg font-semibold text-white mb-3">
                  System Challenge
                </h3>
                <p className="text-gray-300 leading-relaxed whitespace-pre-wrap">
                  {problem.hldQuestion}
                </p>
              </div>

              <div className="bg-white/5 rounded-2xl p-6">
                <h3 className="text-lg font-semibold text-white mb-3">
                  Approach
                </h3>
                <p className="text-gray-300 leading-relaxed whitespace-pre-wrap">
                  {problem.hldApproach}
                </p>
              </div>

              <div className="bg-white/5 rounded-2xl p-6">
                <h3 className="text-lg font-semibold text-white mb-3">
                  Architecture
                </h3>
                <p className="text-gray-300 leading-relaxed">
                  {problem.hldArchitecture}
                </p>
              </div>

              <div>
                <h3 className="text-lg font-semibold text-white mb-3">
                  Tech Stack
                </h3>
                <div className="flex flex-wrap gap-2">
                  {problem.hldTechStack.map((tech, index) => (
                    <span
                      key={index}
                      className="bg-green-500/20 text-green-300 px-3 py-1 rounded-full text-sm"
                    >
                      {tech}
                    </span>
                  ))}
                </div>
              </div>
            </div>
          )}

          {activeTab === "system" && (
            <div className="space-y-8">
              <h2 className="text-2xl font-bold text-orange-400 mb-4">
                üèóÔ∏è Large Scale System Design
              </h2>

              <div className="bg-white/5 rounded-2xl p-6">
                <h3 className="text-lg font-semibold text-white mb-3">
                  System Design Challenge
                </h3>
                <p className="text-gray-300 leading-relaxed whitespace-pre-wrap">
                  {problem.systemDesignQuestion}
                </p>
              </div>

              <div className="bg-white/5 rounded-2xl p-6">
                <h3 className="text-lg font-semibold text-white mb-3">
                  Design Approach
                </h3>
                <p className="text-gray-300 leading-relaxed whitespace-pre-wrap">
                  {problem.systemDesignApproach}
                </p>
              </div>

              {problem.systemDesignDiagram && (
                <div className="bg-white/5 rounded-2xl p-6">
                  <h3 className="text-lg font-semibold text-white mb-3">
                    System Architecture
                  </h3>
                  <p className="text-gray-300 leading-relaxed">
                    {problem.systemDesignDiagram}
                  </p>
                </div>
              )}

              <div className="bg-white/5 rounded-2xl p-6">
                <h3 className="text-lg font-semibold text-white mb-3">
                  Scaling Considerations
                </h3>
                <p className="text-gray-300 leading-relaxed whitespace-pre-wrap">
                  {problem.scalingConsiderations}
                </p>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
</file>

<file path="page.tsx">
"use client";
import { useState, useEffect } from "react";
import Link from "next/link";

interface Problem {
  id: string;
  leetcodeNumber: number;
  title: string;
  difficulty: "Easy" | "Medium" | "Hard";
  description: string;
  tags: string[];
  createdAt: string;
}

export default function ProblemsPage() {
  const [problems, setProblems] = useState<Problem[]>([]);
  const [loading, setLoading] = useState(true);
  const [filter, setFilter] = useState<"All" | "Easy" | "Medium" | "Hard">(
    "All"
  );

  useEffect(() => {
    fetchProblems();
  }, []);

  const fetchProblems = async () => {
    try {
      const response = await fetch("/api/problems");
      const data = await response.json();
      setProblems(data.problems || []);
    } catch (error) {
      console.error("Failed to fetch problems:", error);
    } finally {
      setLoading(false);
    }
  };

  const filteredProblems = problems.filter(
    (problem) => filter === "All" || problem.difficulty === filter
  );

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case "Easy":
        return "from-green-400 to-emerald-400";
      case "Medium":
        return "from-yellow-400 to-orange-400";
      case "Hard":
        return "from-red-400 to-pink-400";
      default:
        return "from-gray-400 to-gray-500";
    }
  };

  const getDifficultyBg = (difficulty: string) => {
    switch (difficulty) {
      case "Easy":
        return "bg-green-500/20 text-green-300 border-green-500/30";
      case "Medium":
        return "bg-yellow-500/20 text-yellow-300 border-yellow-500/30";
      case "Hard":
        return "bg-red-500/20 text-red-300 border-red-500/30";
      default:
        return "bg-gray-500/20 text-gray-300 border-gray-500/30";
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-black flex items-center justify-center">
        <div className="text-white text-xl">Loading problems...</div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-black text-white">
      {/* Header */}
      <div className="bg-white/5 backdrop-blur-xl border-b border-white/10">
        <div className="max-w-7xl mx-auto px-4 py-8">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-4xl font-bold bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent">
                LeetCode ‚Üí Engineering
              </h1>
              <p className="text-gray-400 mt-2">
                {problems.length} problems bridging algorithms to real systems
              </p>
            </div>
            <Link
              href="/"
              className="bg-white/10 hover:bg-white/20 px-4 py-2 rounded-xl transition-all duration-300"
            >
              ‚Üê Back to Home
            </Link>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 py-8">
        {/* Filters */}
        <div className="flex flex-wrap gap-4 mb-8">
          {["All", "Easy", "Medium", "Hard"].map((difficulty) => (
            <button
              key={difficulty}
              onClick={() => setFilter(difficulty as any)}
              className={`px-6 py-3 rounded-xl font-semibold transition-all duration-300 ${
                filter === difficulty
                  ? "bg-gradient-to-r from-purple-600 to-blue-600 text-white"
                  : "bg-white/10 text-gray-400 hover:text-white hover:bg-white/20"
              }`}
            >
              {difficulty}
              {difficulty !== "All" && (
                <span className="ml-2 text-xs opacity-70">
                  ({problems.filter((p) => p.difficulty === difficulty).length})
                </span>
              )}
            </button>
          ))}
        </div>

        {/* Problems Grid */}
        {filteredProblems.length === 0 ? (
          <div className="text-center py-16">
            <div className="text-6xl mb-4">ü§î</div>
            <h2 className="text-2xl font-bold text-gray-400 mb-2">
              No problems found
            </h2>
            <p className="text-gray-500">
              {filter !== "All"
                ? `No ${filter} problems available yet.`
                : "Start by creating your first problem in the admin dashboard."}
            </p>
          </div>
        ) : (
          <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
            {filteredProblems.map((problem, index) => (
              <Link
                key={problem.id}
                href={`/problems/${problem.id}`}
                className="group"
              >
                <div className="bg-white/5 backdrop-blur-xl border border-white/10 rounded-3xl p-6 transition-all duration-500 hover:scale-105 hover:bg-white/10 hover:border-white/20 h-full">
                  {/* Header */}
                  <div className="flex items-center justify-between mb-4">
                    <span className="text-sm font-mono text-gray-400 bg-white/10 px-3 py-1 rounded-full">
                      #{problem.leetcodeNumber}
                    </span>
                    <span
                      className={`text-xs font-semibold px-3 py-1 rounded-full border ${getDifficultyBg(
                        problem.difficulty
                      )}`}
                    >
                      {problem.difficulty.toUpperCase()}
                    </span>
                  </div>

                  {/* Title */}
                  <h3 className="text-xl font-bold mb-3 text-white group-hover:bg-gradient-to-r group-hover:from-purple-200 group-hover:to-blue-200 group-hover:bg-clip-text group-hover:text-transparent transition-all duration-300">
                    {problem.title}
                  </h3>

                  {/* Description */}
                  <p className="text-gray-400 text-sm leading-relaxed mb-4 line-clamp-3">
                    {problem.description}
                  </p>

                  {/* Tags */}
                  <div className="flex flex-wrap gap-2 mb-4">
                    {problem.tags.slice(0, 3).map((tag, tagIndex) => (
                      <span
                        key={tagIndex}
                        className="text-xs bg-purple-500/20 text-purple-300 px-2 py-1 rounded"
                      >
                        {tag}
                      </span>
                    ))}
                    {problem.tags.length > 3 && (
                      <span className="text-xs text-gray-500">
                        +{problem.tags.length - 3} more
                      </span>
                    )}
                  </div>

                  {/* Read More */}
                  <div className="flex items-center text-sm text-purple-400 group-hover:text-purple-300 transition-colors">
                    <span>Read Full Analysis</span>
                    <span className="ml-2 group-hover:translate-x-1 transition-transform duration-300">
                      ‚Üí
                    </span>
                  </div>
                </div>
              </Link>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}
</file>

</files>
